@page
@model WebApp.Pages.Portfolios.DetailsModel
@{
    Layout = "_DesktopLayout";
    ViewData["Title"] = "Portfolio Details";
}

<div class="container-fluid px-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <h1 class="page-title mb-3 mb-md-0">@Model.Portfolio.Name</h1>
        <div>
            <a asp-page="./Index" class="btn btn-outline-secondary me-2">
                <i class="material-icons fs-5 align-middle">arrow_back</i>
                <span class="d-none d-sm-inline">Back to Portfolios</span>
            </a>
            <a asp-page="./Edit" asp-route-id="@Model.Portfolio.Id" class="btn btn-primary">
                <i class="material-icons fs-5 align-middle">edit</i>
                <span class="d-none d-sm-inline">Edit Portfolio</span>
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Portfolio.Description))
    {
        <div class="alert alert-light shadow-sm mb-4">
            <p class="mb-0">@Model.Portfolio.Description</p>
        </div>
    }

    <div class="row mb-4">
        <div class="col-12 col-lg-6 mb-4 mb-lg-0">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Portfolio Summary</h5>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Initial Value</span>
                            <span class="fw-medium">@Html.Raw(Model.FormatCurrency(Model.Portfolio.InitialValue))</span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Total Value</span>
                            <span class="fw-bold fs-4 text-primary">@Html.Raw(Model.FormatCurrency(Model.Portfolio.TotalValue))</span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Total Investment</span>
                            <span class="fw-medium">@Html.Raw(Model.FormatCurrency(Model.Portfolio.TotalInvestment))</span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Unrealized Gain/Loss</span>
                            <span class="fw-medium @(Model.Portfolio.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")">
                                @Html.Raw(Model.FormatCurrency(Model.Portfolio.UnrealizedGainLoss))
                            </span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Return</span>
                            <span class="fw-medium @(Model.Portfolio.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                @(Model.Portfolio.ReturnPercentage >= 0 ? "+" : "")@Model.FormatNumber(Model.Portfolio.ReturnPercentage * 100, 2)%
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Category Distribution</h5>
                </div>
                <div class="card-body">
                    @if (Model.CategoryDistribution.Any())
                    {
                        <div style="position: relative; height: 280px;">
                            <canvas id="categoryDistributionChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-5">
                            <i class="material-icons fs-1">pie_chart</i>
                            <p>Add investments to see category distribution</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center py-3">
            <h5 class="mb-3 mb-md-0">Investments</h5>
            <a asp-page="/Investments/Create" asp-route-portfolioId="@Model.Portfolio.Id" class="btn btn-primary d-flex align-items-center">
                <i class="material-icons me-2">add</i>
                <span>Add Investment</span>
            </a>
        </div>
        <div class="card-body p-0">
            @if (Model.Investments.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="ps-4">Name</th>
                                <th class="d-none d-md-table-cell">Category</th>
                                <th class="d-none d-sm-table-cell">Investment</th>
                                <th>Value</th>
                                <th class="d-none d-md-table-cell">Gain/Loss</th>
                                <th class="d-none d-lg-table-cell">Return</th>
                                <th class="text-end pe-4">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var investment in Model.Investments)
                            {
                                <tr>
                                    <td class="ps-4">
                                        <div class="d-flex flex-column">
                                            <span class="fw-medium">@investment.Name</span>
                                            <div class="d-md-none mt-1">
                                                <span class="badge bg-info bg-opacity-10 text-info px-2 py-1 rounded-pill">@investment.CategoryName</span>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        <span class="badge bg-info bg-opacity-10 text-info px-3 py-2 rounded-pill">@investment.CategoryName</span>
                                    </td>
                                    <td class="d-none d-sm-table-cell fw-medium">@Html.Raw(Model.FormatCurrency(investment.TotalInvestment))</td>
                                    <td class="fw-medium">@Html.Raw(Model.FormatCurrency(investment.CurrentValue))</td>
                                    <td class="d-none d-md-table-cell @(investment.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")">
                                        @(investment.UnrealizedGainLoss >= 0 ? "+" : "")@Html.Raw(Model.FormatCurrency(investment.UnrealizedGainLoss))
                                    </td>
                                    <td class="d-none d-lg-table-cell @(investment.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                        @(investment.ReturnPercentage >= 0 ? "+" : "")@Model.FormatNumber(investment.ReturnPercentage * 100, 2)%
                                    </td>
                                    <td class="text-end pe-4">
                                        <div class="btn-group">
                                            <a asp-page="/Investments/Edit" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-primary">
                                                <i class="material-icons fs-5">edit</i>
                                            </a>
                                            <a asp-page="/Investments/History" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-success">
                                                <i class="material-icons fs-5">trending_up</i>
                                            </a>
                                            <a asp-page="/Investments/Delete" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-danger">
                                                <i class="material-icons fs-5">delete</i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="text-muted">
                        <i class="material-icons fs-1 d-block mb-2">add_circle</i>
                        <p>No investments found. Click the "Add Investment" button to add your first investment.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    @if (Model.CategoryDistribution.Any())
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Category distribution pie chart
                const categoryLabels = @Html.Raw(Json.Serialize(Model.CategoryDistribution.Select(c => c.Name)));
                const categoryValues = @Html.Raw(Json.Serialize(Model.CategoryDistribution.Select(c => c.Value)));
                const categoryColors = [
                    '#4285F4', '#EA4335', '#FBBC05', '#34A853', '#8E24AA', 
                    '#0097A7', '#FF9800', '#795548', '#607D8B', '#3F51B5'
                ];

                const pieCtx = document.getElementById('categoryDistributionChart').getContext('2d');
                new Chart(pieCtx, {
                    type: 'doughnut',
                    data: {
                        labels: categoryLabels,
                        datasets: [{
                            data: categoryValues,
                            backgroundColor: categoryColors.slice(0, categoryLabels.length),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: window.innerWidth < 768 ? 'bottom' : 'right',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.parsed || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: @Model.Settings.CurrencySymbol${value.toLocaleString()} (${percentage}%)`;
                                    }
                                }
                            }
                        },
                        cutout: '70%'
                    }
                });
                
                // Adjust legend position on window resize
                window.addEventListener('resize', function() {
                    chart.options.plugins.legend.position = window.innerWidth < 768 ? 'bottom' : 'right';
                    chart.update();
                });
            });
        </script>
    }
} 