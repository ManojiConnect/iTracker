@page
@model WebApp.Pages.Portfolios.DetailsModel
@{
    Layout = "_DesktopLayout";
    ViewData["Title"] = "Portfolio Details";
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="page-title">@Model.Portfolio.Name</h1>
        <div class="btn-group">
            <a asp-page="./Edit" asp-route-id="@Model.Portfolio.Id" class="btn btn-primary">
                <i class="material-icons me-1">edit</i>
                <span>Edit Portfolio</span>
            </a>
            <a asp-page="./Delete" asp-route-id="@Model.Portfolio.Id" class="btn btn-outline-danger">
                <i class="material-icons me-1">delete</i>
                <span>Delete Portfolio</span>
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Portfolio.Description))
    {
        <div class="alert alert-light shadow-sm mb-4">
            <p class="mb-0">@Model.Portfolio.Description</p>
        </div>
    }

    <div class="row mb-4">
        <div class="col-12 col-lg-6 mb-4 mb-lg-0">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Portfolio Summary</h5>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Initial Value</span>
                            <span class="fw-medium">@Html.Raw(Model.FormatCurrency(Model.Portfolio.InitialValue))</span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Total Value</span>
                            <span class="fw-bold fs-4 text-primary">@Html.Raw(Model.FormatCurrency(Model.Portfolio.TotalValue))</span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Total Investment</span>
                            <span class="fw-medium">@Html.Raw(Model.FormatCurrency(Model.Portfolio.TotalInvestment))</span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Unrealized Gain/Loss</span>
                            <span class="fw-medium @(Model.Portfolio.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")">
                                @Html.Raw(Model.FormatCurrency(Model.Portfolio.UnrealizedGainLoss))
                            </span>
                        </div>
                        <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <span>Return</span>
                            <span class="fw-medium @(Model.Portfolio.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                @(Model.Portfolio.ReturnPercentage >= 0 ? "+" : "")@Model.FormatNumber(Model.Portfolio.ReturnPercentage, 2)%
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Category Distribution</h5>
                </div>
                <div class="card-body">
                    @if (Model.CategoryDistribution.Any())
                    {
                        <div style="position: relative; height: 320px;">
                            <canvas id="categoryDistributionChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-5">
                            <i class="material-icons fs-1">pie_chart</i>
                            <p>Add investments to see category distribution</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @{
        ViewBag.Portfolios = new List<Application.Features.Portfolios.GetAllPortfolios.PortfolioDto> { new() { Id = Model.Portfolio.Id, Name = Model.Portfolio.Name } };
        ViewBag.FormatCurrency = new Func<decimal, string>(Model.FormatCurrency);
        ViewBag.PageSize = Model.PageSize;
        ViewBag.TotalPages = Model.TotalPages;
        ViewBag.CurrentPage = Model.PageNumber;
        ViewBag.StartItem = Model.StartItem;
        ViewBag.EndItem = Model.EndItem;
        ViewBag.TotalItems = Model.TotalItems;
    }
    <partial name="_InvestmentsList" model="Model.Investments" />
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        @if (Model.CategoryDistribution.Any())
        {
            <text>
            const ctx = document.getElementById('categoryDistributionChart').getContext('2d');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: [@Html.Raw(string.Join(",", Model.CategoryDistribution.Select(c => $"'{c.Name}'")))],
                    datasets: [{
                        data: [@string.Join(",", Model.CategoryDistribution.Select(c => c.Value))],
                        backgroundColor: [
                            '#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336', '#607D8B', '#757575'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        }
                    }
                }
            });
            </text>
        }
    </script>
} 