@page
@model WebApp.Pages.Investments.IndexModel
@{
    Layout = "_DesktopLayout";
    ViewData["Title"] = "Investments";
}

<div class="container-fluid px-4">
    <h1 class="page-title">My Investments</h1>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center">
                    <div class="mb-3 mb-sm-0">
                        <h5 class="card-title mb-0">Total Investments</h5>
                        <h2 class="text-primary mb-0">@Model.Investments.TotalCount</h2>
                    </div>
                    <div>
                        <div class="btn-group">
                            <a asp-page="Create" class="btn btn-primary btn-sm d-flex align-items-center" style="white-space: nowrap;">
                                <i class="material-icons me-1">add</i>
                                <span>Add New Investment</span>
                            </a>
                            <a asp-page="ImportInvestments" class="btn btn-outline-primary btn-sm d-flex align-items-center">
                                <i class="material-icons me-1">upload_file</i>
                                <span>Import</span>
                            </a>
                            <a asp-page="ExportInvestments" class="btn btn-outline-primary btn-sm d-flex align-items-center">
                                <i class="material-icons me-1">download</i>
                                <span>Export</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Summaries -->
    @if (Model.CategorySummaries.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Category Distribution</h5>
                    </div>
                    <div class="card-body">
                        <div class="category-scroll-container">
                            <div class="row flex-nowrap g-3">
                                @foreach (var category in Model.CategorySummaries)
                                {
                                    <div class="col-auto" style="min-width: 280px;">
                                        <div class="card h-100 border-0 shadow-sm">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <h6 class="card-title mb-0">@category.Name</h6>
                                                    <span class="badge rounded-pill" style="background-color: @category.Color; color: white;">
                                                        @category.InvestmentCount
                                                    </span>
                                                </div>
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <span class="text-muted small">Total Value</span>
                                                    <span class="fw-medium">@Html.Raw(Model.FormatCurrency(category.TotalValue))</span>
                                                </div>
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <span class="text-muted small">Gain/Loss</span>
                                                    <span class="fw-medium @(category.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")">
                                                        @(category.UnrealizedGainLoss >= 0 ? "+" : "")@Html.Raw(Model.FormatCurrency(category.UnrealizedGainLoss))
                                                    </span>
                                                </div>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <span class="text-muted small">Return</span>
                                                    <span class="badge @(category.ReturnPercentage >= 0 ? "bg-success" : "bg-danger") px-2 py-1">
                                                        @(category.ReturnPercentage >= 0 ? "+" : "")@Model.FormatNumber(category.ReturnPercentage, 2)%
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- List View -->
    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center py-3">
            <h5 class="mb-3 mb-md-0">All Investments</h5>
            <div class="d-flex flex-column flex-sm-row gap-3 w-100">
                <div class="input-group flex-grow-1" style="max-width: 300px;">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="material-icons fs-5">search</i>
                    </span>
                    <input type="text" id="searchInput" class="form-control border-start-0" placeholder="Search investments..." onkeyup="filterItems()">
                </div>
                <div class="d-flex gap-2">
                    <div class="input-group" style="max-width: 200px;">
                        <span class="input-group-text bg-white border-end-0">
                            <i class="material-icons fs-5">category</i>
                        </span>
                        <select id="categoryFilter" class="form-select border-start-0" onchange="filterByCategory()">
                            <option value="">All Categories</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                    </div>
                    <div class="input-group" style="max-width: 220px;">
                        <span class="input-group-text bg-white border-end-0">
                            <i class="material-icons fs-5">view_list</i>
                        </span>
                        <select id="pageSize" class="form-select border-start-0" onchange="changePageSize(this.value)">
                            <option value="10" selected="@(Model.PageSize == 10)">10 per page</option>
                            <option value="25" selected="@(Model.PageSize == 25)">25 per page</option>
                            <option value="50" selected="@(Model.PageSize == 50)">50 per page</option>
                            <option value="100" selected="@(Model.PageSize == 100)">100 per page</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="ps-3" style="width: 25%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Name</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="0"></i>
                                </div>
                            </th>
                            <th class="d-none d-md-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Category</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="1"></i>
                                </div>
                            </th>
                            <th class="d-none d-sm-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Portfolio</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="2"></i>
                                </div>
                            </th>
                            <th class="d-none d-lg-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Value</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="3"></i>
                                </div>
                            </th>
                            <th class="d-none d-xl-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Gain/Loss</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="4"></i>
                                </div>
                            </th>
                            <th style="width: 10%;" class="text-end pe-3">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody" data-sort-order="asc">
                        @foreach (var item in Model.Investments.Items)
                        {
                            <tr class="investment-item" data-category="@item.CategoryName">
                                <td>
                                    <div class="d-flex flex-column">
                                        <span class="fw-medium investment-name">@item.Name</span>
                                        <div class="d-md-none mt-1">
                                            <span class="badge bg-info bg-opacity-10 text-info px-2 py-1 rounded-pill investment-category">@item.CategoryName</span>
                                        </div>
                                    </div>
                                </td>
                                <td class="d-none d-md-table-cell">
                                    <span class="badge bg-info bg-opacity-10 text-info px-3 py-2 rounded-pill investment-category">@item.CategoryName</span>
                                </td>
                                <td class="d-none d-sm-table-cell">
                                    <span class="fw-medium fs-7 investment-portfolio">@item.PortfolioName</span>
                                </td>
                                <td class="d-none d-lg-table-cell">
                                    <span class="fw-medium fs-7">@Html.Raw(Model.FormatCurrency(item.CurrentValue))</span>
                                </td>
                                <td class="d-none d-lg-table-cell">
                                    <span class="fw-medium fs-7 @(item.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")" style="white-space: nowrap;">
                                        @(item.UnrealizedGainLoss >= 0 ? "+" : "")@Html.Raw(Model.FormatCurrency(item.UnrealizedGainLoss))
                                    </span>
                                </td>
                                <td class="text-end pe-3">
                                    <div class="btn-group">
                                        <a asp-page="./Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="material-icons fs-5">edit</i>
                                        </a>
                                        <a asp-page="./Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info">
                                            <i class="material-icons fs-5">info</i>
                                        </a>
                                        <a asp-page="./History" asp-route-id="@item.Id" class="btn btn-sm btn-outline-success">
                                            <i class="material-icons fs-5">trending_up</i>
                                        </a>
                                        <a asp-page="./Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">
                                            <i class="material-icons fs-5">delete</i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @if (Model.Investments.TotalPages > 1)
        {
            <div class="card-footer">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center mb-0">
                        <li class="page-item @(!Model.Investments.HasPreviousPage ? "disabled" : "")">
                            <a class="page-link" asp-page="./Index" asp-route-pageNumber="@(Model.Investments.PageNumber - 1)" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        @for (int i = 1; i <= Model.Investments.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.Investments.PageNumber ? "active" : "")">
                                <a class="page-link" asp-page="./Index" asp-route-pageNumber="@i">@i</a>
                            </li>
                        }
                        <li class="page-item @(!Model.Investments.HasNextPage ? "disabled" : "")">
                            <a class="page-link" asp-page="./Index" asp-route-pageNumber="@(Model.Investments.PageNumber + 1)" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    </div>
</div>

@section Scripts {
    <style>
        .category-scroll-container {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: thin;
            scrollbar-color: rgba(0,0,0,.2) transparent;
        }
        
        .category-scroll-container::-webkit-scrollbar {
            height: 6px;
        }
        
        .category-scroll-container::-webkit-scrollbar-track {
            background: transparent;
        }
        
        .category-scroll-container::-webkit-scrollbar-thumb {
            background-color: rgba(0,0,0,.2);
            border-radius: 3px;
        }
        
        .category-scroll-container::-webkit-scrollbar-thumb:hover {
            background-color: rgba(0,0,0,.3);
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add click handlers to sortable columns
            const sortableHeaders = document.querySelectorAll('th[style*="cursor: pointer"]');
            sortableHeaders.forEach(header => {
                // Add click event listener
                header.addEventListener('click', function() {
                    const columnIndex = parseInt(this.querySelector('.sort-icon').getAttribute('data-column'));
                    sortTableByColumn(columnIndex);
                });
            });
            
            // Initialize sort icons to show no sort direction initially
            const sortIcons = document.querySelectorAll('.sort-icon');
            sortIcons.forEach(icon => {
                icon.textContent = ''; // Empty initially
                icon.style.fontSize = '0.75rem'; // Make icons even smaller
            });
        });
        
        function filterItems() {
            const searchText = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const rows = document.querySelectorAll('.investment-item');
            
            rows.forEach(row => {
                const name = row.querySelector('.investment-name').textContent.toLowerCase();
                const category = row.getAttribute('data-category');
                const matchesSearch = name.includes(searchText);
                const matchesCategory = !categoryFilter || category === categoryFilter;
                
                row.style.display = matchesSearch && matchesCategory ? '' : 'none';
            });
        }
        
        function filterByCategory() {
            filterItems();
        }
        
        function sortTableByColumn(columnIndex) {
            const tbody = document.getElementById('tableBody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const currentOrder = tbody.getAttribute('data-sort-order');
            const newOrder = currentOrder === 'asc' ? 'desc' : 'asc';
            
            // Update sort order attribute
            tbody.setAttribute('data-sort-order', newOrder);
            
            // Update sort icons
            const sortIcons = document.querySelectorAll('.sort-icon');
            sortIcons.forEach(icon => {
                icon.textContent = '';
            });
            
            const currentIcon = document.querySelector(`.sort-icon[data-column="${columnIndex}"]`);
            currentIcon.textContent = newOrder === 'asc' ? 'arrow_upward' : 'arrow_downward';
            
            // Sort rows
            rows.sort((a, b) => {
                let aValue = a.children[columnIndex].textContent.trim();
                let bValue = b.children[columnIndex].textContent.trim();
                
                // Handle numeric values
                if (columnIndex === 3 || columnIndex === 4) { // Value and Gain/Loss columns
                    aValue = parseFloat(aValue.replace(/[^0-9.-]+/g, '')) || 0;
                    bValue = parseFloat(bValue.replace(/[^0-9.-]+/g, '')) || 0;
                }
                
                if (newOrder === 'asc') {
                    return aValue > bValue ? 1 : -1;
                } else {
                    return aValue < bValue ? 1 : -1;
                }
            });
            
            // Reorder rows
            rows.forEach(row => tbody.appendChild(row));
        }
        
        function changePageSize(size) {
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set('pageSize', size);
            urlParams.set('pageNumber', '1'); // Reset to first page when changing page size
            window.location.href = window.location.pathname + '?' + urlParams.toString();
        }
    </script>
}