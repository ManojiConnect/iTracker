@page
@model WebApp.Pages.Investments.IndexModel
@{
    Layout = "_DesktopLayout";
    ViewData["Title"] = "Investments";
}
@inject WebApp.Services.IApplicationSettingsService ApplicationSettings

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="page-title">Investments</h1>
        <div class="d-flex gap-2">
            <a asp-page="Create" class="btn btn-primary d-flex align-items-center">
                <i class="material-icons me-1" style="font-size: 20px;">add</i>
                <span>Add Investment</span>
            </a>
            <div class="dropdown">
                <button class="btn btn-outline-primary dropdown-toggle d-flex align-items-center" type="button" id="importExportDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="material-icons me-1" style="font-size: 20px;">import_export</i>
                    <span>Import/Export</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="importExportDropdown">
                    <li>
                        <a class="dropdown-item" asp-page="ImportInvestments">
                            <i class="material-icons me-2">upload_file</i> Import
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" asp-page="ExportInvestments">
                            <i class="material-icons me-2">download</i> Export
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Portfolio Selector -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <form id="portfolioForm" method="get" class="row g-3 align-items-center">
                <div class="col-12 col-md-6">
                    <div class="d-flex align-items-center">
                        <label for="portfolioId" class="form-label fw-bold me-3 mb-0 text-nowrap">Select Portfolio:</label>
                        <select id="portfolioIdSelector" name="portfolioId" class="form-select form-select-lg" onchange="this.form.submit()">
                            <option value="">All Portfolios</option>
                            @foreach (var portfolio in Model.Portfolios)
                            {
                                <option value="@portfolio.Id" selected="@(Model.PortfolioId == portfolio.Id)">@portfolio.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <input type="hidden" name="pageSize" value="@Model.PageSize">
            </form>
        </div>
    </div>

    @if (Model.SelectedPortfolio != null)
    {
        <!-- Portfolio Details Section -->
        <div class="row mb-4">
            <div class="col-12 col-lg-6 mb-4 mb-lg-0">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            @if (Model.PortfolioId.HasValue)
                            {
                                <span>Portfolio Summary: @Model.SelectedPortfolio.Name</span>
                            }
                            else
                            {
                                <span>All Portfolios Summary</span>
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group list-group-flush">
                            <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                                <span>Total Value</span>
                                <span class="fw-bold fs-4 text-primary">@ApplicationSettings.FormatCurrency(Model.SelectedPortfolio.TotalValue)</span>
                            </div>
                            <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                                <span>Total Investment</span>
                                <span class="fw-medium">@ApplicationSettings.FormatCurrency(Model.SelectedPortfolio.TotalInvestment)</span>
                            </div>
                            <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                                <span>Unrealized Gain/Loss</span>
                                <span class="fw-medium @(Model.SelectedPortfolio.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")">
                                    @ApplicationSettings.FormatCurrency(Model.SelectedPortfolio.UnrealizedGainLoss)
                                </span>
                            </div>
                            <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                                <span>Return</span>
                                <span class="fw-medium @(Model.SelectedPortfolio.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                    @(Model.SelectedPortfolio.ReturnPercentage >= 0 ? "+" : "")@ApplicationSettings.FormatNumber(Model.SelectedPortfolio.ReturnPercentage, 2)%
                                </span>
                            </div>
                            <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                                <span>Created On</span>
                                <span class="fw-medium">@Model.SelectedPortfolio.CreatedOn.ToString("MMM dd, yyyy")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-6">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            @if (Model.PortfolioId.HasValue)
                            {
                                <span>Category Distribution</span>
                            }
                            else
                            {
                                <span>Category Distribution Across All Portfolios</span>
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (Model.CategoryDistribution.Any())
                        {
                            <div style="position: relative; height: 320px;">
                                <canvas id="categoryDistributionChart"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-5">
                                <i class="material-icons fs-1">pie_chart</i>
                                <p>Add investments to see category distribution</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <form id="filterForm" method="get" class="row g-3 align-items-end">
                        <div class="col-12 col-md-4">
                            <label for="category" class="form-label">Category</label>
                            <select id="category" name="category" class="form-select" asp-items="Model.CategorySelectList">
                                <option value="">All Categories</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-4">
                            <label for="searchText" class="form-label">Search</label>
                            <input type="text" id="searchText" name="searchText" class="form-control form-control-equal" value="@Model.SearchText" placeholder="Search investments...">
                        </div>
                        <div class="col-12 col-md-4 d-flex gap-2">
                            <button type="submit" class="btn btn-primary flex-grow-1 btn-slick">
                                Apply
                            </button>
                            <button type="button" id="resetFilters" class="btn btn-outline-secondary">
                                <i class="material-icons">refresh</i>
                            </button>
                        </div>
                        <input type="hidden" name="portfolioId" value="@Model.PortfolioId">
                        <input type="hidden" name="sortBy" id="sortBy" value="@Model.SortBy">
                        <input type="hidden" name="sortOrder" id="sortOrder" value="@Model.SortOrder">
                        <input type="hidden" name="pageNumber" id="pageNumber" value="@Model.PageNumber">
                        <input type="hidden" name="pageSize" id="pageSize" value="@Model.PageSize">
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Investments Grid -->
    <div class="card shadow-sm mb-3">
        <partial name="_InvestmentsTable" model="Model" />
    </div>
</div>

<style>
    .sortable-header {
        cursor: pointer;
    }
    
    .sortable-header:hover {
        border-bottom: 2px solid #0d47a1;
    }
    
    .sort-icon {
        font-size: 18px;
    }
    
    .page-link {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        padding: 0;
    }
    
    .page-link-nav {
        cursor: pointer;
    }
    
    .page-link i {
        font-size: 20px;
    }

    .btn-slick {
        transition: all 0.2s ease;
        border-radius: 6px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 500;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    
    .btn-slick:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }
    
    .form-control-equal {
        height: calc(2.25rem + 2px);
        padding: 0.375rem 0.75rem;
    }
    
    /* Custom row hover effect */
    table.table tbody tr {
        transition: all 0.15s ease;
        cursor: pointer;
    }
    
    table.table tbody tr:hover {
        background-color: rgba(13, 71, 161, 0.04);
    }
    
    table.table tbody tr:hover td {
        color: #0d47a1;
    }
    
    .nowrap {
        white-space: nowrap;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }
    
    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #0d47a1;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .table-responsive.loading::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.7);
        z-index: 1;
    }
    
    .table-responsive.loading::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 50px;
        height: 50px;
        margin-top: -25px;
        margin-left: -25px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #0d47a1;
        border-radius: 50%;
        z-index: 2;
        animation: spin 1s linear infinite;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        @if (Model.CategoryDistribution.Any())
        {
            <text>
            const ctx = document.getElementById('categoryDistributionChart').getContext('2d');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: [@Html.Raw(string.Join(",", Model.CategoryDistribution.Select(c => $"'{c.Name}'")))],
                    datasets: [{
                        data: [@string.Join(",", Model.CategoryDistribution.Select(c => c.Value))],
                        backgroundColor: [
                            '#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336', '#607D8B', '#757575'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        }
                    }
                }
            });
            </text>
        }

        document.addEventListener('DOMContentLoaded', function() {
            // AJAX form handling for filters
            const filterForm = document.getElementById('filterForm');
            if (filterForm) {
                filterForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    // Show loading state
                    const investmentsTable = document.querySelector('.table-responsive');
                    if (investmentsTable) {
                        investmentsTable.classList.add('loading');
                        investmentsTable.style.opacity = '0.6';
                        investmentsTable.style.position = 'relative';
                    }
                    
                    // Collect form data
                    const formData = new FormData(filterForm);
                    const queryParams = new URLSearchParams(formData).toString();
                    
                    // Update URL without reloading page
                    const newUrl = window.location.pathname + '?' + queryParams;
                    history.pushState({ path: newUrl }, '', newUrl);
                    
                    // Make AJAX request
                    fetch(newUrl, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.text())
                    .then(html => {
                        // Create a temporary element to parse the HTML
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        
                        // Update the table content
                        const newTable = tempDiv.querySelector('.table-responsive');
                        if (newTable && investmentsTable) {
                            investmentsTable.innerHTML = newTable.innerHTML;
                        }
                        
                        // Update the pagination
                        const currentPagination = document.querySelector('.d-flex.justify-content-between.align-items-center.mt-3.mb-4');
                        const newPagination = tempDiv.querySelector('.d-flex.justify-content-between.align-items-center.mt-3.mb-4');
                        if (newPagination && currentPagination) {
                            currentPagination.innerHTML = newPagination.innerHTML;
                        }
                        
                        // Remove loading state
                        if (investmentsTable) {
                            investmentsTable.classList.remove('loading');
                            investmentsTable.style.opacity = '1';
                        }
                        
                        // Re-initialize event handlers for the new content
                        initializeEventHandlers();
                    })
                    .catch(error => {
                        console.error('Error fetching filtered data:', error);
                        // Remove loading state on error
                        if (investmentsTable) {
                            investmentsTable.classList.remove('loading');
                            investmentsTable.style.opacity = '1';
                        }
                    });
                });
            }
            
            // Initialize all event handlers
            initializeEventHandlers();
            
            function initializeEventHandlers() {
                // Make table rows clickable
                const tableRows = document.querySelectorAll('table.table tbody tr');
                tableRows.forEach(row => {
                    row.addEventListener('click', function(e) {
                        // Don't trigger if clicking on buttons/links
                        if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A' || 
                            e.target.closest('button') || e.target.closest('a')) {
                            return;
                        }
                        
                        // Get the history link (first link in the action buttons)
                        const historyLink = this.querySelector('.btn-group a:first-child');
                        if (historyLink) {
                            window.location.href = historyLink.getAttribute('href');
                        }
                    });
                });
                
                // Handle sortable headers with AJAX
                const sortableHeaders = document.querySelectorAll('.sortable-header');
                sortableHeaders.forEach(header => {
                    header.addEventListener('click', function(e) {
                        e.preventDefault();
                        const sortBy = this.getAttribute('data-sort-by');
                        const currentSortBy = document.getElementById('sortBy').value;
                        const currentSortOrder = document.getElementById('sortOrder').value;
                        
                        let newSortOrder = 'asc';
                        if (sortBy === currentSortBy) {
                            newSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';
                        }
                        
                        document.getElementById('sortBy').value = sortBy;
                        document.getElementById('sortOrder').value = newSortOrder;
                        document.getElementById('pageNumber').value = '1'; // Reset to page 1 when sorting
                        
                        // Trigger AJAX form submission
                        const submitEvent = new Event('submit', { bubbles: true });
                        filterForm.dispatchEvent(submitEvent);
                    });
                });
                
                // Handle pagination with AJAX
                const pageLinks = document.querySelectorAll('.page-link-nav');
                pageLinks.forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        const page = this.getAttribute('data-page');
                        document.getElementById('pageNumber').value = page;
                        
                        // Trigger AJAX form submission
                        const submitEvent = new Event('submit', { bubbles: true });
                        filterForm.dispatchEvent(submitEvent);
                    });
                });
                
                // Handle page size change with AJAX
                const pageSizeSelect = document.getElementById('pageSizeSelect');
                if (pageSizeSelect) {
                    pageSizeSelect.addEventListener('change', function(e) {
                        document.getElementById('pageSize').value = this.value;
                        document.getElementById('pageNumber').value = '1'; // Reset to page 1 when changing page size
                        
                        // Trigger AJAX form submission
                        const submitEvent = new Event('submit', { bubbles: true });
                        filterForm.dispatchEvent(submitEvent);
                    });
                }
                
                // Handle reset filters
                const resetButton = document.getElementById('resetFilters');
                if (resetButton) {
                    resetButton.addEventListener('click', function() {
                        window.location.href = '?resetFilters=true';
                    });
                }

                // Handle portfolio change
                const portfolioSelector = document.getElementById('portfolioIdSelector');
                if (portfolioSelector) {
                    portfolioSelector.addEventListener('change', function() {
                        document.getElementById('portfolioForm').submit();
                    });
                }
            }
        });
    </script>
}