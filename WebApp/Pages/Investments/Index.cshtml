@page
@model WebApp.Pages.Investments.IndexModel
@{
    Layout = "_DesktopLayout";
    ViewData["Title"] = "Investments";
}

<div class="container-fluid px-4">
    <h1 class="page-title">My Investments</h1>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center">
                    <div class="mb-3 mb-sm-0">
                        <h5 class="card-title mb-0">Total Investments</h5>
                        <h2 class="text-primary mb-0">@Model.Investments.TotalCount</h2>
                    </div>
                    <div>
                        <div class="btn-group">
                            <a asp-page="Create" class="btn btn-primary btn-sm d-flex align-items-center" style="white-space: nowrap;">
                                <i class="material-icons me-1">add</i>
                                <span>Add New Investment</span>
                            </a>
                            <a asp-page="ImportInvestments" class="btn btn-outline-primary btn-sm d-flex align-items-center">
                                <i class="material-icons me-1">upload_file</i>
                                <span>Import</span>
                            </a>
                            <a asp-page="ExportInvestments" class="btn btn-outline-primary btn-sm d-flex align-items-center">
                                <i class="material-icons me-1">download</i>
                                <span>Export</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Summaries -->
    @if (Model.CategorySummaries.Any())
    {
        <div class="row mb-4">
            @foreach (var category in Model.CategorySummaries)
            {
                <div class="col-12 col-sm-6 col-lg-4 col-xl-3 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                <div class="rounded-circle p-2 me-3" style="background-color: @category.Color">
                                    <i class="material-icons text-white">category</i>
                                </div>
                                <div>
                                    <h6 class="mb-0">@category.Name</h6>
                                    <small class="text-muted">@category.InvestmentCount Investments</small>
                                </div>
                            </div>
                            <div class="mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-muted">Value:</span>
                                    <span class="fw-bold">@Html.Raw(Model.FormatCurrency(category.TotalValue))</span>
                                </div>
                            </div>
                            <div class="mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-muted">Gain/Loss:</span>
                                    <span class="@(category.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")">
                                        @(category.UnrealizedGainLoss >= 0 ? "+" : "")@Html.Raw(Model.FormatCurrency(category.UnrealizedGainLoss))
                                    </span>
                                </div>
                            </div>
                            <div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-muted">Return:</span>
                                    <span class="@(category.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                        @(category.ReturnPercentage >= 0 ? "+" : "")@Model.FormatNumber(category.ReturnPercentage, 2)%
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @{
        ViewBag.Portfolios = Model.Portfolios;
        ViewBag.FormatCurrency = new Func<decimal, string>(Model.FormatCurrency);
        ViewBag.PageSize = Model.Investments.PageSize;
    }
    <partial name="_InvestmentsList" model="Model.Investments.Items" />
</div>

@section Scripts {
    <style>
        .category-scroll-container {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: thin;
            scrollbar-color: rgba(0,0,0,.2) transparent;
        }
        
        .category-scroll-container::-webkit-scrollbar {
            height: 6px;
        }
        
        .category-scroll-container::-webkit-scrollbar-track {
            background: transparent;
        }
        
        .category-scroll-container::-webkit-scrollbar-thumb {
            background-color: rgba(0,0,0,.2);
            border-radius: 3px;
        }
        
        .category-scroll-container::-webkit-scrollbar-thumb:hover {
            background-color: rgba(0,0,0,.3);
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add click handlers to sortable columns
            const sortableHeaders = document.querySelectorAll('th[style*="cursor: pointer"]');
            sortableHeaders.forEach(header => {
                // Add click event listener
                header.addEventListener('click', function() {
                    const columnIndex = parseInt(this.querySelector('.sort-icon').getAttribute('data-column'));
                    sortTableByColumn(columnIndex);
                });
            });
            
            // Initialize sort icons to show no sort direction initially
            const sortIcons = document.querySelectorAll('.sort-icon');
            sortIcons.forEach(icon => {
                icon.textContent = ''; // Empty initially
                icon.style.fontSize = '0.75rem'; // Make icons even smaller
            });
        });
        
        function filterItems() {
            const searchText = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const rows = document.querySelectorAll('.investment-item');
            
            rows.forEach(row => {
                const name = row.querySelector('.investment-name').textContent.toLowerCase();
                const category = row.getAttribute('data-category');
                const matchesSearch = name.includes(searchText);
                const matchesCategory = !categoryFilter || category === categoryFilter;
                
                row.style.display = matchesSearch && matchesCategory ? '' : 'none';
            });
        }
        
        function filterByCategory() {
            filterItems();
        }
        
        function sortTableByColumn(columnIndex) {
            const tbody = document.getElementById('tableBody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const currentOrder = tbody.getAttribute('data-sort-order');
            const newOrder = currentOrder === 'asc' ? 'desc' : 'asc';
            
            // Update sort order attribute
            tbody.setAttribute('data-sort-order', newOrder);
            
            // Update sort icons
            const sortIcons = document.querySelectorAll('.sort-icon');
            sortIcons.forEach(icon => {
                icon.textContent = '';
            });
            
            const currentIcon = document.querySelector(`.sort-icon[data-column="${columnIndex}"]`);
            currentIcon.textContent = newOrder === 'asc' ? 'arrow_upward' : 'arrow_downward';
            
            // Sort rows
            rows.sort((a, b) => {
                let aValue = a.children[columnIndex].textContent.trim();
                let bValue = b.children[columnIndex].textContent.trim();
                
                // Handle numeric values
                if (columnIndex === 3 || columnIndex === 4) { // Value and Gain/Loss columns
                    aValue = parseFloat(aValue.replace(/[^0-9.-]+/g, '')) || 0;
                    bValue = parseFloat(bValue.replace(/[^0-9.-]+/g, '')) || 0;
                }
                
                if (newOrder === 'asc') {
                    return aValue > bValue ? 1 : -1;
                } else {
                    return aValue < bValue ? 1 : -1;
                }
            });
            
            // Reorder rows
            rows.forEach(row => tbody.appendChild(row));
        }
        
        function changePageSize(size) {
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set('pageSize', size);
            urlParams.set('pageNumber', '1'); // Reset to first page when changing page size
            window.location.href = window.location.pathname + '?' + urlParams.toString();
        }
    </script>
}