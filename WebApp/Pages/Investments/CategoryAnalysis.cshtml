@page
@model WebApp.Pages.Investments.CategoryAnalysisModel
@{
    ViewData["Title"] = "Category Analysis";
}

<style>
    .chart-container {
        position: relative;
        height: 300px;
        max-height: 80vh;
        margin: 0 auto;
    }
    
    @@media (max-width: 767px) {
        .chart-container {
            height: 250px;
            width: 100%;
        }
    }
</style>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12 d-flex justify-content-between align-items-center flex-wrap gap-2">
            <h1 class="page-title">Category Analysis</h1>
            <a href="@(Model.PortfolioId.HasValue ? $"/Portfolios?portfolioId={Model.PortfolioId}" : "/Portfolios")" class="btn btn-outline-secondary">
                <i class="material-icons small align-middle">arrow_back</i> Back to Portfolios
            </a>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    @if (Model.IsAllPortfolios)
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i> Showing consolidated category performance across all portfolios
                        </div>
                    }
                    else 
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i> Showing category performance for <strong>@Model.PortfolioName</strong>
                        </div>
                    }
                    
                    @if (!Model.Categories.Any())
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i> No investment data available for category analysis
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <!-- Category Allocation Chart (Donut) -->
                            <div class="col-lg-6 mb-4">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Category Allocation</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="chart-container">
                                            <canvas id="categoryAllocationChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Category Return Chart (Bar) -->
                            <div class="col-lg-6 mb-4">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Category Returns</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="chart-container">
                                            <canvas id="categoryReturnsChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Category Performance Table -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="mb-0">Category Performance Details</h5>
                                    </div>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table table-striped table-hover mb-0">
                                                <thead class="bg-light">
                                                    <tr>
                                                        <th>Category</th>
                                                        <th>Allocation %</th>
                                                        <th>Total Invested</th>
                                                        <th>Current Value</th>
                                                        <th>P/L</th>
                                                        <th>Return %</th>
                                                        <th class="d-none d-md-table-cell">Count</th>
                                                        @if (Model.IsAllPortfolios)
                                                        {
                                                            <th class="d-none d-md-table-cell">Portfolios</th>
                                                        }
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var category in Model.Categories)
                                                    {
                                                        <tr>
                                                            <td>@category.CategoryName</td>
                                                            <td>@category.AllocationPercentage.ToString("F2")%</td>
                                                            <td>@Model.FormatCurrency(category.TotalInvestment)</td>
                                                            <td>@Model.FormatCurrency(category.CurrentValue)</td>
                                                            <td class="@(category.ProfitLoss >= 0 ? "text-success" : "text-danger")">
                                                                @(category.ProfitLoss >= 0 ? "+" : "")@Model.FormatCurrency(Math.Abs(category.ProfitLoss))
                                                            </td>
                                                            <td class="@(category.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                                                @($"{(category.ReturnPercentage >= 0 ? "+" : "")}{category.ReturnPercentage:F2}%")
                                                            </td>
                                                            <td class="d-none d-md-table-cell">@category.InvestmentCount</td>
                                                            @if (Model.IsAllPortfolios)
                                                            {
                                                                <td class="d-none d-md-table-cell">@category.PortfolioCount</td>
                                                            }
                                                            <td>
                                                                <a href="/Investments/Index?Category=@category.CategoryName@(Model.PortfolioId.HasValue ? $"&portfolioId={Model.PortfolioId}" : "")" 
                                                                   class="btn btn-sm btn-outline-primary">
                                                                    <i class="fas fa-filter"></i> View
                                                                </a>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    @if (Model.Categories.Any())
    {
        <script>
        /* <![CDATA[ */
        document.addEventListener('DOMContentLoaded', function() {
            // Category labels and colors for both charts
            const categoryLabels = @Html.Raw(Model.CategoryLabelsJson);
            const chartColors = @Html.Raw(Model.ChartColorsJson);
            
            // Check screen size for responsive adjustments
            const isMobile = window.innerWidth < 768;
            
            // Allocation Chart (Donut)
            const allocationData = @Html.Raw(Model.AllocationDataJson);
            const ctxAllocation = document.getElementById('categoryAllocationChart').getContext('2d');
            new Chart(ctxAllocation, {
                type: 'doughnut',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        data: allocationData,
                        backgroundColor: chartColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: isMobile ? 'bottom' : 'right',
                            labels: {
                                boxWidth: isMobile ? 12 : 20,
                                font: {
                                    size: isMobile ? 10 : 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.label + ': ' + context.raw.toFixed(2) + '%';
                                }
                            }
                        }
                    }
                }
            });
            
            // Returns Chart (Bar)
            const returnData = @Html.Raw(Model.ReturnDataJson);
            const ctxReturns = document.getElementById('categoryReturnsChart').getContext('2d');
            new Chart(ctxReturns, {
                type: 'bar',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        label: 'Return %',
                        data: returnData,
                        backgroundColor: chartColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            ticks: {
                                font: {
                                    size: isMobile ? 9 : 12
                                },
                                maxRotation: 45,
                                minRotation: isMobile ? 45 : 0
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                },
                                font: {
                                    size: isMobile ? 10 : 12
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                font: {
                                    size: isMobile ? 10 : 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + context.raw.toFixed(2) + '%';
                                }
                            }
                        }
                    }
                }
            });
            
            // Handle resize events
            window.addEventListener('resize', function() {
                const currentIsMobile = window.innerWidth < 768;
                if (currentIsMobile !== isMobile) {
                    location.reload(); // Reload to update chart configuration
                }
            });
        });
        /* ]]> */
        </script>
    }
} 