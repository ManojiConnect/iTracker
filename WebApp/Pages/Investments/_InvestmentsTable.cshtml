@using Application.Features.Investments.Common
@using Application.Features.Common.Responses
@using WebApp.Services
@inject IApplicationSettingsService ApplicationSettings

@model PaginatedList<InvestmentDto>

@{
    var formatCurrency = ApplicationSettings.FormatCurrency;
    
    // Get current query parameters
    var queryParams = new Dictionary<string, string>();
    foreach (var param in Context.Request.Query)
    {
        if (param.Key != "pageNumber") // Exclude pageNumber as we'll set it separately
        {
            queryParams[param.Key] = param.Value.ToString();
        }
    }
    
    // Helper function to build URL with query parameters
    string BuildUrl(int pageNumber)
    {
        var url = $"?pageNumber={pageNumber}";
        foreach (var param in queryParams)
        {
            url += $"&{param.Key}={param.Value}";
        }
        return url;
    }
}

<div class="card shadow-sm">
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Portfolio</th>
                    <th class="text-end">Total Investment</th>
                    <th class="text-end">Current Value</th>
                    <th class="text-end">Return</th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="tableBody">
                @foreach (var investment in Model.Items)
                {
                    <tr>
                        <td>
                            <div class="d-flex align-items-center">
                                <i class="material-icons me-2">category</i>
                                <div>
                                    <div class="fw-medium">@investment.Name</div>
                                    <small class="text-muted">@investment.Symbol</small>
                                </div>
                            </div>
                        </td>
                        <td>@investment.CategoryName</td>
                        <td>@investment.PortfolioName</td>
                        <td class="text-end">@formatCurrency(investment.TotalInvestment)</td>
                        <td class="text-end">@formatCurrency(investment.CurrentValue)</td>
                        <td class="text-end">
                            <span class="@(investment.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                @(investment.ReturnPercentage >= 0 ? "+" : "")@investment.ReturnPercentage.ToString("0.00")%
                            </span>
                        </td>
                        <td class="text-end">
                            <div class="btn-group">
                                <a asp-page="./Edit" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-primary">
                                    <i class="material-icons">edit</i>
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteInvestment(@investment.Id)">
                                    <i class="material-icons">delete</i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    @if (!Model.Items.Any())
    {
        <div class="text-center py-5">
            <i class="material-icons text-muted" style="font-size: 48px;">search_off</i>
            <p class="text-muted mt-2">No investments found matching your criteria.</p>
        </div>
    }
    
    @if (Model.TotalPages > 1)
    {
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div class="text-muted">
                Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount) of @Model.TotalCount entries
            </div>
            <nav>
                <ul class="pagination pagination-sm mb-0">
                    @if (Model.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@BuildUrl(Model.PageNumber - 1)" aria-label="Previous" data-page="@(Model.PageNumber - 1)">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">&laquo;</span>
                        </li>
                    }

                    @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                    {
                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                            <a class="page-link" href="@BuildUrl(i)" data-page="@i">@i</a>
                        </li>
                    }

                    @if (Model.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@BuildUrl(Model.PageNumber + 1)" aria-label="Next" data-page="@(Model.PageNumber + 1)">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">&raquo;</span>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
    else if (Model.TotalCount > 0)
    {
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="text-muted">
                Showing all @Model.TotalCount investments
            </div>
        </div>
    }
</div> 