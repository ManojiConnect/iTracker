@using Application.Features.Investments.Common
@using Application.Features.Portfolios.GetAllPortfolios
@using WebApp.Models
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@model IEnumerable<InvestmentDto>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Investments</h5>
        <a asp-page="/Investments/Create" class="btn btn-primary btn-sm d-flex align-items-center">
            <i class="material-icons me-1">add</i>
            <span>Add Investment</span>
        </a>
    </div>
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text py-1"><i class="material-icons">search</i></span>
                    <input type="text" class="form-control py-1" id="searchInput" placeholder="Search..." onkeyup="filterItems()">
                </div>
            </div>
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text"><i class="material-icons">account_balance</i></span>
                    <select class="form-select" id="portfolioFilter" onchange="filterByPortfolio()">
                        <option value="">All Portfolios</option>
                        @foreach (var portfolio in ViewBag.Portfolios ?? new List<Application.Features.Portfolios.GetAllPortfolios.PortfolioDto>())
                        {
                            <option value="@portfolio.Id">@portfolio.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text"><i class="material-icons">category</i></span>
                    <select class="form-select" id="categoryFilter" onchange="filterByCategory()">
                        <option value="">All Categories</option>
                        @{
                            var categories = Model.Select(i => i.CategoryName).Distinct().OrderBy(c => c);
                            foreach (var category in categories)
                            {
                                <option value="@category">@category</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text"><i class="material-icons">format_list_numbered</i></span>
                    <select class="form-select" id="pageSize" onchange="changePageSize(this.value)">
                        @{
                            var pageSizes = new[] { 10, 25, 50, 100 };
                            foreach (var size in pageSizes)
                            {
                                if (ViewBag.PageSize == size)
                                {
                                    <option value="@size" selected>@size per page</option>
                                }
                                else
                                {
                                    <option value="@size">@size per page</option>
                                }
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            @if (Model.Any())
            {
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="ps-3" style="width: 30%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Name</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="0"></i>
                                </div>
                            </th>
                            <th class="d-none d-md-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Category</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="1"></i>
                                </div>
                            </th>
                            <th class="d-none d-sm-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Portfolio</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="2"></i>
                                </div>
                            </th>
                            <th class="d-none d-lg-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Value</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="3"></i>
                                </div>
                            </th>
                            <th class="d-none d-xl-table-cell" style="width: 15%; cursor: pointer;">
                                <div class="d-flex align-items-center">
                                    <span>Gain/Loss</span>
                                    <i class="material-icons fs-6 sort-icon ms-1" data-column="4"></i>
                                </div>
                            </th>
                            <th style="width: 10%;" class="text-end pe-3">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var investment in Model)
                        {
                            <tr class="investment-item" data-portfolio-id="@investment.PortfolioId" data-category="@investment.CategoryName">
                                <td>
                                    <div class="d-flex flex-column">
                                        <span class="fw-medium investment-name">@investment.Name</span>
                                        <div class="d-md-none mt-1">
                                            <span class="badge bg-info bg-opacity-10 text-info px-2 py-1 rounded-pill investment-category">@investment.CategoryName</span>
                                        </div>
                                    </div>
                                </td>
                                <td class="d-none d-md-table-cell">
                                    <span class="badge bg-info bg-opacity-10 text-info px-3 py-2 rounded-pill investment-category">@investment.CategoryName</span>
                                </td>
                                <td class="d-none d-sm-table-cell">
                                    <span class="fw-medium fs-7 investment-portfolio">@investment.PortfolioName</span>
                                </td>
                                <td class="d-none d-lg-table-cell">
                                    <span class="fw-medium fs-7">@Html.Raw(ViewBag.FormatCurrency(investment.CurrentValue))</span>
                                </td>
                                <td class="d-none d-xl-table-cell">
                                    <span class="fw-medium fs-7 @(investment.UnrealizedGainLoss >= 0 ? "text-success" : "text-danger")" style="white-space: nowrap;">
                                        @(investment.UnrealizedGainLoss >= 0 ? "+" : "")@Html.Raw(ViewBag.FormatCurrency(investment.UnrealizedGainLoss))
                                    </span>
                                </td>
                                <td class="text-end pe-3">
                                    <div class="btn-group">
                                        <a asp-page="/Investments/Edit" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="material-icons fs-5">edit</i>
                                        </a>
                                        <a asp-page="/Investments/Details" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="material-icons fs-5">info</i>
                                        </a>
                                        <a asp-page="/Investments/History" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-success">
                                            <i class="material-icons fs-5">trending_up</i>
                                        </a>
                                        <a asp-page="/Investments/Delete" asp-route-id="@investment.Id" class="btn btn-sm btn-outline-danger">
                                            <i class="material-icons fs-5">delete</i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="text-center text-muted py-5">
                    <i class="material-icons fs-1">account_balance</i>
                    <p>No investments found</p>
                </div>
            }
        </div>
        @if (ViewBag.TotalPages > 1)
        {
            <div class="d-flex justify-content-between align-items-center mt-3">
                <div class="text-muted">
                    Showing @ViewBag.StartItem to @ViewBag.EndItem of @ViewBag.TotalItems items
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination mb-0">
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@GetPageUrl(ViewBag.CurrentPage - 1)" aria-label="Previous">
                                    <i class="material-icons">chevron_left</i>
                                </a>
                            </li>
                        }
                        @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@GetPageUrl(i)">@i</a>
                            </li>
                        }
                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@GetPageUrl(ViewBag.CurrentPage + 1)" aria-label="Next">
                                    <i class="material-icons">chevron_right</i>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        }
    </div>
</div>

@functions {
    private string GetPageUrl(int page)
    {
        var request = HttpContextAccessor.HttpContext.Request;
        var queryParams = new Dictionary<string, string>();
        foreach (var key in request.Query.Keys)
        {
            if (key != "pageNumber")
            {
                queryParams[key] = request.Query[key];
            }
        }
        queryParams["pageNumber"] = page.ToString();
        
        var queryString = string.Join("&", queryParams.Select(x => $"{x.Key}={x.Value}"));
        return $"{request.Path}?{queryString}";
    }
}

<script>
    function filterItems() {
        const searchText = document.getElementById('searchInput').value.toLowerCase();
        const portfolioId = document.getElementById('portfolioFilter').value;
        const category = document.getElementById('categoryFilter').value;
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            const name = row.querySelector('.investment-name').textContent.toLowerCase();
            const rowCategory = row.querySelector('.investment-category').textContent;
            const portfolio = row.querySelector('.investment-portfolio').textContent;
            const matchesSearch = name.includes(searchText);
            const matchesPortfolio = !portfolioId || portfolio === portfolioId;
            const matchesCategory = !category || rowCategory === category;
            row.style.display = matchesSearch && matchesPortfolio && matchesCategory ? '' : 'none';
        });
    }

    function filterByPortfolio() {
        filterItems();
    }

    function filterByCategory() {
        filterItems();
    }

    function changePageSize(size) {
        const url = new URL(window.location.href);
        url.searchParams.set('pageSize', size);
        url.searchParams.set('pageNumber', '1');
        window.location.href = url.toString();
    }
</script> 